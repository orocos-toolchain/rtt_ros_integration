#include <@ROSMSGBOOSTHEADER@>
#include <rtt_roscomm/rtt_rostopic_ros_msg_transporter.hpp>
#include <rtt_roscomm/rtt_rostopic.h>
#include <rtt/types/TransportPlugin.hpp>
#include <rtt/types/TypekitPlugin.hpp>

namespace rtt_roscomm {
  using namespace RTT;
  struct ROS@ROSMSGNAME@Plugin
    : public types::TransportPlugin
    {
      bool registerTransport(std::string name, types::TypeInfo* ti)
      {
        if(name == "/@ROSPACKAGE@/@ROSMSGNAME@")
          return ti->addProtocol(ORO_ROS_PROTOCOL_ID,new RosMsgTransporter<@ROSMSGTYPE@>());
        return false;
      }

      std::string getTransportName() const {
        return "ros";
      }

      std::string getTypekitName() const {
        return std::string("ros-")+"@ROSMSGNAME@";
      }
      std::string getName() const {
        return std::string("rtt-ros-") + "@ROSMSGNAME@" + "-transport";
      }

    };
}

ORO_TYPEKIT_PLUGIN( rtt_roscomm::ROS@ROSMSGNAME@Plugin )
